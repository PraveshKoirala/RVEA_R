mat
class(mat)
Main()
class(Population[, 1:(M-i)])
class(Population[, 1:(M-1)])
class(Population[, 1:(M-2)])
M
class(Population[, 1:(1)])
class(Population[, 1:2])
R(class(Population[, 1:2]))
subset(Population, select = 1)
subset(Population, select = 1:2)
Population[1, ]
Population[, 1 ]
subset(Population, 1)
subset(Population, subset = c(1))
subset(Population, subset = c(T))
Population[, 1 ]
Population[, C(1) ]
Population[, 1, drop=TRUE]
Population[, 1, exact=TRUE]
Population[, 1, exact=T]
?"["
Population$(1,2)
"Hello"
"Hello"[1:2, exact=T]
c(abc=123)[1]
c(abc=123)[[1]]
Population[, 1]
C(Population[, 1])
C(Population[, 1:2])
Population[, 1, drop=F]
source('~/mat2R/RVEA_R/utils.R')
source('~/mat2R/RVEA_R/RVEA/MAIN.R')
Start()
Main()
source('~/mat2R/RVEA_R/Public/P_objective.R')
Main()
debugSource('~/mat2R/RVEA_R/Public/P_generator.R')
Main()
Temp
class(Temp)
dim(Temp)
Temp
Main()
Temp
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
Generations
Temp
Offspring[Temp]
Temp
Offspring
debugSource('~/mat2R/RVEA_R/Public/P_generator.R')
Main()
D
miu
dim(MatingPool)
Offspring
Offspring
sum(is.nan(Offspring))
MaxOffspring
sum(is.nan(Offspring))
MaxValue
MinValue
debugSource('~/mat2R/RVEA_R/Public/P_objective.R')
Main()
MaxValue
MinValue
C(MaxValue,MinValue)
R(MaxValue,MinValue)
rbind(MaxValue, MinValue)
View(Prod)
all(list(T, F))
all(list(T, F, F))
all(c(T, F, F))
all(list(T, F, F) == T)
all(list(T, F, F) == F)
C <- function(...){
print(all(is.matrix(list(...))) == T )
return (as.matrix(c(...)))
}
C(1,2,3)
C(R(1,2))
C(R(1,2), R(2,3))
C <- function(...){
print(is.matrix(list(...)) )
return (as.matrix(c(...)))
}
C(R(1,2), R(2,3))
C <- function(...){
print(class(...) )
return (as.matrix(c(...)))
}
C(R(1,2), R(2,3))
C <- function(...){
print( is.matrix(list(...)[[1]]) )
return (as.matrix(c(...)))
}
C(R(1,2), R(2,3))
# r stands for row vector
R <- function(...){
if ( is.matrix(list(...)[[1]]) ){
return (cbind(...))
}
return (t(c(...)))
}
C <- function(...){
if ( is.matrix(list(...)[[1]]) ){
return (rbind(...))
}
return (as.matrix(c(...)))
}
C(R(1,2,3), (2,3,4))
C(R(1,2,3), R(2,3,4))
R(R(1,2,3), R(2,3,4))
R(C(1,2,3), C(2,3,4))
source('~/mat2R/RVEA_R/utils.R')
Main()
Offspring
debugSource('~/mat2R/RVEA_R/Public/P_generator.R')
View(P_generator)
source('~/mat2R/RVEA_R/Public/P_generator.R')
Main()
Main()
mat
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
FunctionValue
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
FunctionValue
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
FunctionValue
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
debugSource('~/mat2R/RVEA_R/Public/P_generator.R')
source('~/mat2R/RVEA_R/Public/P_generator.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
FunctionValue
Population
dim(Population)
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
dim(FunctionValue)
dim(val)
dim(FunctionValue)
Zmin
source('~/mat2R/RVEA_R/utils.R')
sourceall("Public")
sourceall("RVEA")
source('~/mat2R/RVEA_R/Main.R')
Main()
debugSource('~/mat2R/RVEA_R/utils.R')
Main()
m
m[1,2]
m[1,1]
m
length(m)
dim(m) <- NULL
m
debugSource('~/mat2R/RVEA_R/utils.R')
m <- C(1,2)
dim(m)
dim(m) <- 0
dim(m) <- NULL
m
m <- R(1,2)
dim(m) <- NULL
m
debugSource('~/mat2R/RVEA_R/utils.R')
Main()
source('~/mat2R/RVEA_R/utils.R')
Main()
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
repmat(sqrt(Sum(FunctionValue^2,2)), R(1, M) )
FunctionValue
res <- repmat(sqrt(Sum(FunctionValue^2,2)), R(1, M) )
res
FunctionValue / res
FunctionValue / c(res)
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
maxc
cosine
class(cosine)
dim(cosine)
maxcidx(cosine)
maxcidx
maxc
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
which
apply(FUN = FUNCTION, mat, MARGIN = 1)
FUNCTION
MinMax <- function(FUNCTION, WHICH_FUNCTION, mat, axis, which){
if (!is.matrix(mat)){
mat <- R(mat)
}
if (axis == 2){
value <- as.matrix(apply(FUN = FUNCTION, X=mat, MARGIN = 1))
index <- as.matrix(apply(FUN = WHICH_FUNCTION, X=mat, MARGIN=1))
}
else if (axis == 1){
value <- t(apply(FUN = FUNCTION, X=mat, MARGIN = 2))
index <- t(apply(FUN = WHICH_FUNCTION, X=mat, MARGIN = 2))
}
else
stop("This operation not supported")
if (which)
return (list(value, index))
return(value)
}
Main()
maxc
cosine
sum(is.na(cosine))
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
maxcidx
maxcidx
maxcidx
Main()
maxcidx
maxcidx[1,]
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
maxcidx
Main()
maxcidx[i,1]
class[maxcidx[i,1], 'c']
class[maxcidx[i,1]]
class
class[5, 'c']
maxcidx[[5]]
class[maxcidx[[5]], 'c']
class[maxcidx[[2]], 'c']
class[maxcidx[[4]], 'c']
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
warnings()
source('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
Main()
source('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
source('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
Main()
Main()
class
class[maxcidx[[i]]]
maxcidx[[i]]
i
dim(maxc)
dim(maxidx)
dim(maxcidx)
N
i
maxcidx[115]
maxcidx[115, 1]
maxcidx
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
debugSource('~/mat2R/RVEA_R/utils.R')
Main()
axis
apply(mat, 1, max)
mat
dim(mat)
source('~/mat2R/RVEA_R/RVEA/F_select.R')
m
m <- C(R(1,2), R(2,3))
m
m[1,2] <- NaN
max(m)
max(na.rm = T)
debugSource('~/mat2R/RVEA_R/utils.R')
Main()
?which.max
debugSource('~/mat2R/RVEA_R/utils.R')
Main()
source('~/mat2R/RVEA_R/utils.R')
Main()
Main()
maxcidx
dim(cosine)
cosine[115,]
source('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
warnings()
warnings()
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
uFunctionValue
uFunctionValue %*% t(V)
acos(uFunctionValue %*% t(V))
acos(cosine)
cosine
?acos
uFunctionValue
m <- C(R(1,2), R(2, 3))
m
m / C(1, 2)
apply(m, 1, "/", C(1,2))
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
uFunctionValue
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
dim(FunctionValue)
dim(div)
dim(apply(FunctionValue , 1,"/", div))
dim(apply(FunctionValue , 1,function(x){x/div} ))
dim(apply(FunctionValue , 2,function(x){x/div} ))
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
Main()
dim(FunctionValue)
head(FunctionValue)
head(div)
head(FunctionValue) / head(div)
apply(head(FunctionValue), 1, "/", head(div))
apply(head(FunctionValue), 2, "/", head(div))
sapply(head(FunctionValue), 1, "/", head(div))
apply(head(FunctionValue), 1, "/", head(div))
head(FunctionValue)
head(FunctionValue)[, 1] / head(div)
repmat(Zmin, R(size(FunctionValue,1), 1))
Zmin
FunctionValue
Zmin
Main()
uFunctionValue
max(uFunctionValue)
max(uFunctionValue, na.ignore=T)
max(uFunctionValue, na.remove=T)
max(uFunctionValue, na.rm = T)
debugSource('~/mat2R/RVEA_R/RVEA/F_select.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
Generations
N
P
N
V
View(F_select)
View(MAIN)
View(MAIN)
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
N
Vs
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
N
Temp
W
M
W
source('~/mat2R/RVEA_R/RVEA/F_weight.R')
Main()
V
V
V
dim(cosineVV)
scosineVV
rbind(scosineVV)
cbind(scosineVV)
acosVV
size(acosVV)
acosVV
C(acosVV)
Sort_descend(C(R(1,2), R(2,3), R(4,5)))
Sort_descend <- function(mat){
sorted_mat <- apply(mat, 1, sort, decreasing=T, index.return=T)
value <- lapply(sorted_mat, function(x){x$x})
index <- lapply(sorted_mat, function(x){x$ix})
list(t(value), t(index))
}
list[a, ] = Sort_descend(C(R(1,2), R(2,3), R(4,5)))
a
list[a, b] = Sort_descend(C(R(1,2), R(2,3), R(4,5)))
b
m <- C(R(1,2), R(2,3), R(4,5))
m
sorted_mat <- apply(mat, 2, sort, decreasing=T)
sorted_mat <- apply(m, 2, sort, decreasing=T)
sorted_mat
sorted_mat <- apply(t(m), 2, sort, decreasing=T)
sorted_mat
m
sorted_mat <- apply(m, 1, sort, decreasing=T)
sorted_mat
sorted_mat <- apply(m, 2, sort, decreasing=T)
sorted_mat
sorted_mat <- apply(m, 1, sort, decreasing=T)
sorted_mat
mat <- C(R(1,2), R(2,3), R(4, 5), R(-9,2), R(9,0))
mat
Sort_descend(mat)
Sort_descend(mat)[[1]]
apply(mat, 1, sort, decreasing=T)
apply(mat, 1, sort, decreasing=T, index.return=T)
r <- apply(mat, 1, sort, decreasing=T, index.return=T)
lapply(r, function(x){x$x})
rbind(lapply(r, function(x){x$x}))
rbindlist(lapply(r, function(x){x$x}))
?rbindlist
do.call("rbind", lapply(r, function(x){x$x}))
Sort_descend <- function(mat){
sorted_mat <- apply(mat, 1, sort, decreasing=T, index.return=T)
value <- do.call('rbind', lapply(sorted_mat, function(x){x$x}))
index <- do.call('rbind', lapply(sorted_mat, function(x){x$ix}))
list(t(value), t(index))
}
m
mat
Sort_descend(mat = mat)
Sort_descend <- function(mat){
sorted_mat <- apply(mat, 1, sort, decreasing=T, index.return=T)
value <- do.call('rbind', lapply(sorted_mat, function(x){x$x}))
index <- do.call('rbind', lapply(sorted_mat, function(x){x$ix}))
list(value, index)
}
Sort_descend(mat = mat)
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
acosVV
size(Population)
Boundary
Coding
FunctionValue
MatingPool
Generations
Evaluations
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
Generations
Evaluations
Generations %*% N
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
N
Generations
Main()
D
Generations
Generations[2]
Generations
N
source('~/mat2R/RVEA_R/Public/P_settings.R')
Main()
Evaluations
N
Vs
N
Vs
Vs
uFunctionValue
cosine
acosine
source('~/mat2R/RVEA_R/Main.R')
source('~/mat2R/RVEA_R/utils.R')
sourceall("Public")
sourceall("RVEA")
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
FunctionValue
scosineVV
refV
FunctionValue
MatingPool
dim(MatingPool)
FE
size(Population)
FunctionValue
5^2*2
source('~/mat2R/RVEA_R/RVEA/MAIN.R')
Main()
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
View(MAIN)
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
source('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
View(MAIN)
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
source('~/mat2R/RVEA_R/Main.R')
source('~/mat2R/RVEA_R/utils.R')
sourceall("Public")
sourceall("RVEA")
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
debugSource('~/mat2R/RVEA_R/RVEA/MAIN.R')
